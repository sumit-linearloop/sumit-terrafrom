# name: Terraform CI/CD Pipeline-apply

# on:
#   workflow_dispatch:  

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     env:
#       TFE_TOKEN: ${{ secrets.TFE_TOKEN }}  # Ensure the API token is available to the entire job

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.9.8

#       - name: Configure Terraform Cloud credentials
#         run: |
#           mkdir -p ~/.terraform.d
#           echo "{\"credentials\": {\"app.terraform.io\": {\"token\": \"${{ secrets.TFE_TOKEN }}\"}}}" > ~/.terraform.d/credentials.tfrc.json
          
#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Plan
#         run: terraform plan

#       - name: Terraform Apply
#         run: terraform apply -auto-approve





# name: Terraform CI/CD Pipeline-apply

# on:
#   workflow_dispatch:  # Allow manual triggering of the pipeline

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     env:
#       TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       AWS_REGION: "ap-south-1"

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup AWS and Dependencies
#         run: |
#           chmod +x ./sumit.sh
#           ./sumit.sh
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: ap-south-1

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.9.8

#       - name: Configure Terraform Cloud credentials
#         run: |
#           mkdir -p ~/.terraform.d
#           echo "{\"credentials\": {\"app.terraform.io\": {\"token\": \"${{ secrets.TFE_TOKEN }}\"}}}" > ~/.terraform.d/credentials.tfrc.json
          
#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Plan
#         run: terraform plan

#       - name: Terraform Apply
#         run: terraform apply -auto-approve



name: Terraform CI/CD Pipeline-apply

on:
  workflow_dispatch:  
    inputs:
      username:
        description: 'SSH Username'
        required: true
        default: 'ubuntu'

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Configure Terraform Cloud credentials
        run: |
          mkdir -p ~/.terraform.d
          echo "{\"credentials\": {\"app.terraform.io\": {\"token\": \"${{ secrets.TFE_TOKEN }}\"}}}" > ~/.terraform.d/credentials.tfrc.json

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get EC2 Public IP
        id: ec2_ip
        run: |
          PUBLIC_IP=$(terraform output -raw instance_public_ip)
          echo "EC2 Public IP: $PUBLIC_IP"
          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV  # Store output in environment variable

          # Debugging output to check if the value is correct
          echo "Terraform Output (raw):"
          terraform output instance_public_ip

      - name: Check Terraform Output and Debug State
        run: |
          terraform output instance_public_ip
          terraform state show aws_instance.worker

      - name: SSH Login and Run Commands
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: ap-south-1
          EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}  # Use the environment variable
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > sumit.pem
          chmod 600 sumit.pem

          # Debug: Ensure EC2_PUBLIC_IP is correctly retrieved
          echo "EC2_PUBLIC_IP: $EC2_PUBLIC_IP"

          # SSH into EC2 instance
          ssh -i sumit.pem -o StrictHostKeyChecking=no ${{ github.event.inputs.username }}@$EC2_PUBLIC_IP << 'EOF'
            set -e
            echo "Connected to remote server"
            sudo apt-get update -y
            sudo apt-get install -y awscli
            aws --version
            aws s3 ls
          EOF

          # Clean up
          rm -f sumit.pem
